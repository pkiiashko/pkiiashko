# -*- coding: utf-8 -*-
"""hw5code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pGTJQ95GRB5p_qXyseYHY0NQipzzDmIx
"""

import numpy as np
from collections import Counter

def find_best_split(feature_vector, target_vector):
    """
    Finds the best split of a dataset according to the Gini criterion.

    :param feature_vector: 1D array of real-valued features.
    :param target_vector: 1D array of target classes (binary: 0 or 1).
    :return: thresholds, ginis, threshold_best, gini_best
    """

    # Sort features and corresponding targets
    sorted_indices = np.argsort(feature_vector)
    feature_vector = feature_vector[sorted_indices]
    target_vector = target_vector[sorted_indices]

    # Find thresholds
    unique_features = np.unique(feature_vector)
    thresholds = (unique_features[:-1] + unique_features[1:]) / 2

    # Initialize Gini calculation
    left_counts = np.cumsum(target_vector[:-1])
    left_total = np.arange(1, len(target_vector))
    right_counts = left_counts[-1] - left_counts
    right_total = len(target_vector) - left_total

    # Avoid divisions by zero
    left_proportions = np.divide(left_counts, left_total, out=np.zeros_like(left_counts, dtype=float), where=left_total > 0)
    right_proportions = np.divide(right_counts, right_total, out=np.zeros_like(right_counts, dtype=float), where=right_total > 0)

    # Compute Gini impurity
    left_gini = 1 - left_proportions**2 - (1 - left_proportions)**2
    right_gini = 1 - right_proportions**2 - (1 - right_proportions)**2

    ginis = - (left_total / len(target_vector)) * left_gini - (right_total / len(target_vector)) * right_gini

    # Find the best split
    gini_best = np.min(ginis)
    threshold_best = thresholds[np.argmin(ginis)]

    return thresholds, ginis, threshold_best, gini_best

class DecisionTree:
    def __init__(self, feature_types, max_depth=None, min_samples_split=None, min_samples_leaf=None):
        if np.any(list(map(lambda x: x != "real" and x != "categorical", feature_types))):
            raise ValueError("There is unknown feature type")

        self._tree = {}
        self._feature_types = feature_types
        self._max_depth = max_depth
        self._min_samples_split = min_samples_split
        self._min_samples_leaf = min_samples_leaf

    def _fit_node(self, sub_X, sub_y, node, depth=0):
        if np.all(sub_y == sub_y[0]) or \
          (self._max_depth is not None and depth >= self._max_depth) or \
          (self._min_samples_split is not None and len(sub_y) < self._min_samples_split):
            node["type"] = "terminal"
            node["class"] = Counter(sub_y).most_common(1)[0][0]
            return

        feature_best, threshold_best, gini_best, split = None, None, None, None
        for feature in range(sub_X.shape[1]):
            feature_type = self._feature_types[feature]
            feature_vector = sub_X[:, feature]

            if feature_type == "real":
                thresholds, ginis = find_best_split(feature_vector, sub_y)
            elif feature_type == "categorical":
                unique_values = np.unique(feature_vector)
                thresholds = unique_values[:-1]  # Avoid splitting all into one node
                ginis = []
                for threshold in thresholds:
                    split = feature_vector == threshold
                    ginis.append(self._compute_gini_split(sub_y, split))
            else:
                raise ValueError("Unknown feature type")

            best_idx = np.argmin(ginis)
            if gini_best is None or ginis[best_idx] < gini_best:
                feature_best = feature
                threshold_best = thresholds[best_idx]
                gini_best = ginis[best_idx]
                split = feature_vector < threshold_best if feature_type == "real" else feature_vector == threshold_best

        if feature_best is None:
            node["type"] = "terminal"
            node["class"] = Counter(sub_y).most_common(1)[0][0]
            return

        node["type"] = "nonterminal"
        node["feature_split"] = feature_best
        node["threshold"] = threshold_best if self._feature_types[feature_best] == "real" else None
        node["categories_split"] = threshold_best if self._feature_types[feature_best] == "categorical" else None

        node["left_child"], node["right_child"] = {}, {}
        self._fit_node(sub_X[split], sub_y[split], node["left_child"], depth + 1)
        self._fit_node(sub_X[~split], sub_y[~split], node["right_child"], depth + 1)

    def _predict_node(self, x, node):
        if node["type"] == "terminal":
            return node["class"]

        feature_split = node["feature_split"]
        feature_value = x[feature_split]

        if self._feature_types[feature_split] == "real":
            if feature_value < node["threshold"]:
                return self._predict_node(x, node["left_child"])
            else:
                return self._predict_node(x, node["right_child"])
        elif self._feature_types[feature_split] == "categorical":
            if feature_value in node["categories_split"]:
                return self._predict_node(x, node["left_child"])
            else:
                return self._predict_node(x, node["right_child"])
        else:
            raise ValueError("Unknown feature type")

    def fit(self, X, y):
        self._fit_node(X, y, self._tree)

    def predict(self, X):
        predicted = []
        for x in X:
            predicted.append(self._predict_node(x, self._tree))
        return np.array(predicted)


class LinearRegressionTree():
    def __init__(self, feature_types, base_model_type=None, max_depth=None, min_samples_split=None, min_samples_leaf=None):
        pass

